@charset "UTF-8";
@import "compass/reset";
// 兼容性
@mixin radius($radius...) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
}

@mixin rotate($rotate...) {
  -webkit-transform: rotate($rotate);
  -moz-transform: rotate($rotate);
  -ms-transform: rotate($rotate);
  -o-transform: rotate($rotate);
  transform: rotate($rotate);
}

@mixin transition($trans...) {
  -webkit-transition: $trans;
  -moz-transition: $trans;
  -ms-transition: $trans;
  -o-transition: $trans;
  transition: $trans;
}

@mixin transform($trans...) {
  -webkit-transform: $trans;
  -moz-transform: $trans;
  -ms-transform: $trans;
  -o-transform: $trans;
  transform: $trans;
}

// 3D变换
// 父级
@mixin transformStyle() {
  -webkit-transform-style: preserve-3d;
  -moz-transform-style: preserve-3d;
  -ms-transform-style: preserve-3d;
  -o-transform-style: preserve-3d;
  transform-style: preserve-3d;
}

// 父父级
@mixin perspective() {
  -webkit-perspective: 1200px;
  -moz-perspective: 1200px;
  -ms-perspective: 1200px;
  -o-perspective: 1200px;
  perspective: 1200px;
}

@mixin boxshadow($box) {
  -webkit-box-shadow: $box;
  -moz-box-shadow: $box;
  box-shadow: $box;
}

@mixin boxsizing($box) {
  -webkit-box-sizing: $box;
  -moz-box-sizing: $box;
  box-sizing: $box;
}

@mixin nowarp($argu: null) {
  @if not $argu {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $argu;
    overflow: hidden;
  }
}

@mixin displayFlex() {
  display: -webkit-box; /* 老版本语法: Safari, iOS, Android browser, older WebKit browsers. */
  display: -moz-box; /* 老版本语法: Firefox (buggy) */
  display: -ms-flexbox; /* 混合版本语法: IE 10 */
  display: -webkit-flex; /* 新版本语法: Chrome 21+ */
  display: flex; /* 新版本语法: Opera 12.1, Firefox 22+ */
}

@mixin flex($argu...) {
  -webkit-flex: $argu;
  -ms-flex: $argu;
  -mox-flex: $argu;
  flex: $argu;

}

@mixin justifyContent($argu) {
  -webkit-box-pack: $argu;
  -moz-justify-content: $argu;
  -webkit-justify-content: $argu;
  justify-content: $argu;
}

@mixin flexDirection() {
  -webkit-box-pack: end;
  -webkit-box-direction: reverse;
  -webkit-box-orient: horizontal;
  -moz-flex-direction: row-reverse;
  -webkit-flex-direction: row-reverse;
  flex-direction: row-reverse;
}

@mixin placeholder($name) {
  #{$name}::-webkit-input-placeholder {
    @content;
  }

  #{$name}:-ms-input-placeholder { // IE10+
    @content;
  }

  #{$name}:-moz-placeholder { // Firefox4-18
    @content;
  }

  #{$name}::-moz-placeholder { // Firefox19+
    @content;

  }

}

// 动画
@mixin keyframes($name) {

  @-webkit-keyframes #{$name} {
    @content;
  }

  @-moz-keyframes #{$name} {
    @content;
  }

  @-ms-keyframes #{$name} {
    @content;
  }

  @-o-keyframes #{$name}{
    @content;
  }
  @-khtml-keyframes #{$name} {
    @content;
  }

  @keyframes #{$name} {
    @content;
  }
}

@mixin animation($argu...) {
  -webkit-animation: $argu;
  -o-animation: $argu;
  -moz-animation: $argu;
  -ms-animation: $argu;
  animation: $argu;
}

@mixin tranformCenter() {
  position: absolute;
  left: 50%;
  top: 50%;
  @include transform(translate(-50%, -50%));
}

// 移动端1px边线
@mixin pxOne($argu) {
  &::before {
    content: "";
    pointer-events: none; /* 防止点击触发 */
    box-sizing: border-box;
    position: absolute;
    width: 200%;
    height: 200%;
    left: 0;
    top: 0;
    border-radius: 8px;
    border: 1px solid #999;
    -webkit-transform: scale(0.5);
    -webkit-transform-origin: 0 0;
    transform: scale(0.5);
    transform-origin: 0 0;
  }
}

@mixin pixel($px...) {
  @content;
  @media screen and (-webkit-min-device-pixel-ratio: 1.5) {
    @content;
    @include transform(scale(0.667));
  }
  @media screen and (-webkit-min-device-pixel-ratio: 2) {
    @content;
    @include transform(scale(0.5));
  }
  @media screen and (-webkit-min-device-pixel-ratio: 3) {
    @content;
    @include transform(scale(0.333));
  }

  @media screen and (min-device-pixel-ratio: 1.5) {
    @content;
    @include transform(scale(0.667));

  }
  @media screen and (min-device-pixel-ratio: 2) {
    @content;
    @include transform(scale(0.5));
  }
  @media screen and (min-device-pixel-ratio: 3) {
    @content;
    @include transform(scale(0.333));
  }
}

// 百分比
@function per($son) {
  @return percentage($son);
}

@function vw($argu) {
  @return $argu/750*100 + vw;
}

@function vh($argu) {
  @return $argu/1206*100 + vh;
}

// style begin
html, body {
  height: 100%;
  margin: 0 auto;
  position: relative;
}

.none {
  display: none;
}

.block {
  display: block !important;
}

.swiper-slide {
  overflow: hidden;
}

$fontColor: #fff;
$buttonColor: #ff0;
$bdColor: rgba(253, 253, 169, 0.5);
$bdColorL: rgba(253, 253, 169, 0.2);

// 动画

// 旋转
@include keyframes(myrotate) {
  0% {
    @include transform(rotate(0deg));
  }
  100% {
    @include transform(rotate(360deg));
  }
}

.myrotate {
  -webkit-animation-name: myrotate;
  animation-name: myrotate;
  -webkit-animation-iteration-count: 1;
  animation-iteration-count: 1;
  -webkit-animation-timing-function: linear;
  animation-timing-function: linear;
}
// 反向旋转
@include keyframes(myrotater) {
  0% {
    @include transform(rotate(45deg));
  }

  100% {
    @include transform(rotate(-135deg));
  }
}

.myrotater {
  -webkit-animation-name: myrotater;
  animation-name: myrotater;
  -webkit-animation-iteration-count: 1;
  animation-iteration-count: 1;
  -webkit-animation-timing-function: linear;
  animation-timing-function: linear;
}

// 进入
@include keyframes(fadeInRightRotate) {
  0% {
    opacity: 0;
    @include transform(rotate(-45deg) translate3d(100%, 0, 0));
  }

  100% {
    opacity: 1;
    @include transform(rotate(405deg));
  }
}

.fadeInRightRotate {
  -webkit-animation-name: fadeInRightRotate;
  animation-name: fadeInRightRotate;
}

// shake
@include keyframes(zshake) {
  0%, 25% {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }

  5%, 15% {
    -webkit-transform: translate3d(0, -7px, 0);
    transform: translate3d(0, -7px, 0);
  }

  10%, 20% {
    -webkit-transform: translate3d(0, 7px, 0);
    transform: translate3d(0, 7px, 0);
  }
  25%, 100% {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}

.zshake {
  -webkit-animation-name: zshake;
  animation-name: zshake;
  -webkit-animation-iteration-count: 3;
  animation-iteration-count: 3;
  -webkit-animation-timing-function: linear;
  animation-timing-function: linear;
}

// lightSpeedInRight
@include keyframes(lightSpeedInRight) {
  0% {
    -webkit-transform: translate3d(-100%, 0, 0) skewX(-30deg);
    transform: translate3d(-100%, 0, 0) skewX(-30deg);
    opacity: 0;
  }

  60% {
    -webkit-transform: skewX(20deg);
    transform: skewX(20deg);
    opacity: 1;
  }

  80% {
    -webkit-transform: skewX(-5deg);
    transform: skewX(-5deg);
    opacity: 1;
  }

  100% {
    -webkit-transform: none;
    transform: none;
    opacity: 1;
  }
}

.lightSpeedInRight {
  -webkit-animation-name: lightSpeedInRight;
  animation-name: lightSpeedInRight;
  -webkit-animation-timing-function: ease-out;
  animation-timing-function: ease-out;
}

// z-moveout
@include keyframes(zzoomOut) {

  0% {
    opacity: 0;
    -webkit-transform: scale3d(5.3, 5.3, 5.3);
    transform: scale3d(5.3, 5.3, 5.3);
  }

  100% {
    opacity: 1;
  }
}

.zzoomOut {
  -webkit-animation-name: zzoomOut;
  animation-name: zzoomOut;
  -webkit-animation-iteration-count: 1;
  animation-iteration-count: 1;
  -webkit-animation-timing-function: ease-in;
  animation-timing-function: ease-in;
}

@include keyframes(zfadeInRight) {
  0% {
    opacity: 0;
    -webkit-transform: translate3d(500px, 0, 0);
    -ms-transform: translate3d(500px, 0, 0);
    transform: translate3d(500px, 0, 0);
  }
  100% {
    opacity: 1;
    -webkit-transform: none;
    -ms-transform: none;
    transform: none;
  }
}

@include keyframes(zfadeInLeft) {
  0% {
    opacity: 0;
    -webkit-transform: translate3d(-500px, 0, 0);
    -ms-transform: translate3d(-500px, 0, 0);
    transform: translate3d(-500px, 0, 0);
  }
  100% {
    opacity: 1;
    -webkit-transform: none;
    -ms-transform: none;
    transform: none;
  }
}
$fontSize: 16;
@mixin setPm($name,$val...) {
  $max: length($val);
  $str: "";
  @for $i from 1 through $max {
    $value: nth($val,$i)/2/$fontSize;
    $str: #{$str + $value}rem;
    @if $i<$max {
      $str: #{$str+" "};
    }
  }
  #{$name}: $str;
}

(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{361:function(_,v,e){"use strict";e.r(v);var l=e(10),a=Object(l.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"mysql"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mysql"}},[_._v("#")]),_._v(" MySQL")]),_._v(" "),v("h2",{attrs:{id:"数据库操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据库操作"}},[_._v("#")]),_._v(" 数据库操作")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("show databases")]),_._v(" 查看数据库")]),_._v(" "),v("li",[v("code",[_._v("create database database_name")]),_._v(" 创建数据库")]),_._v(" "),v("li",[v("code",[_._v("use database_name")]),_._v(" 选择数据库")]),_._v(" "),v("li",[v("code",[_._v("drop database database_name")]),_._v(" 删除数据库")]),_._v(" "),v("li",[v("code",[_._v("show engines")]),_._v(" 显示存储引擎")]),_._v(" "),v("li",[v("code",[_._v("set default_storage_engine=MyISAM;")]),_._v(" 设置默认引擎")]),_._v(" "),v("li",[v("code",[_._v("show variables like 'default_storage_engine';")]),_._v(" 查看默认引擎")])]),_._v(" "),v("h2",{attrs:{id:"数据类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[_._v("#")]),_._v(" 数据类型")]),_._v(" "),v("h3",{attrs:{id:"整型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#整型"}},[_._v("#")]),_._v(" 整型")]),_._v(" "),v("ul",[v("li",[_._v("tinyint\n"),v("ul",[v("li",[_._v("1 字节")])])]),_._v(" "),v("li",[_._v("smallint\n"),v("ul",[v("li",[_._v("2 字节")])])]),_._v(" "),v("li",[_._v("mediumint\n"),v("ul",[v("li",[_._v("3 字节")])])]),_._v(" "),v("li",[_._v("int\n"),v("ul",[v("li",[_._v("4 字节")]),_._v(" "),v("li",[v("code",[_._v("integer")]),_._v(" 的简写")]),_._v(" "),v("li",[_._v("设置长度 "),v("code",[_._v("int(3)")]),_._v(" "),v("code",[_._v("int(6)")])]),_._v(" "),v("li",[_._v("int的长度并不影响数据的存储精度，长度只和显示有关")])])]),_._v(" "),v("li",[_._v("bigint\n"),v("ul",[v("li",[_._v("8 字节")])])])]),_._v(" "),v("h3",{attrs:{id:"浮点数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浮点数"}},[_._v("#")]),_._v(" 浮点数")]),_._v(" "),v("ul",[v("li",[_._v("float\n"),v("ul",[v("li",[_._v("4 字节")])])]),_._v(" "),v("li",[_._v("double\n"),v("ul",[v("li",[_._v("8 字节")])])])]),_._v(" "),v("h3",{attrs:{id:"定点数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#定点数"}},[_._v("#")]),_._v(" 定点数")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("decimal(m, d) / dec(m, d)")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("M+2")]),_._v(" 字节")]),_._v(" "),v("li",[_._v("存储的是字符串， 更高的精度")])])])]),_._v(" "),v("h3",{attrs:{id:"日期与时间类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#日期与时间类型"}},[_._v("#")]),_._v(" 日期与时间类型")]),_._v(" "),v("ul",[v("li",[_._v("year\n"),v("ul",[v("li",[_._v("1 字节")]),_._v(" "),v("li",[_._v("默认 "),v("code",[_._v("0000")])]),_._v(" "),v("li",[_._v("年")])])]),_._v(" "),v("li",[_._v("date\n"),v("ul",[v("li",[_._v("4 字节")]),_._v(" "),v("li",[_._v("默认 "),v("code",[_._v("0000:00:00")])]),_._v(" "),v("li",[_._v("日期")])])]),_._v(" "),v("li",[_._v("time\n"),v("ul",[v("li",[_._v("3 字节")]),_._v(" "),v("li",[_._v("默认 "),v("code",[_._v("00-00-00")])]),_._v(" "),v("li",[_._v("时间")])])]),_._v(" "),v("li",[_._v("datetime\n"),v("ul",[v("li",[_._v("8 字节")]),_._v(" "),v("li",[_._v("默认 "),v("code",[_._v("0000-00-00 00:00:00")])]),_._v(" "),v("li",[_._v("日期时间")])])]),_._v(" "),v("li",[_._v("timestamp\n"),v("ul",[v("li",[_._v("4 字节")]),_._v(" "),v("li",[_._v("默认 "),v("code",[_._v("00000000000000")])]),_._v(" "),v("li",[_._v("时间戳")])])])]),_._v(" "),v("h3",{attrs:{id:"字符串-m"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字符串-m"}},[_._v("#")]),_._v(" 字符串(M)")]),_._v(" "),v("ul",[v("li",[_._v("char\n"),v("ul",[v("li",[_._v("长度 "),v("code",[_._v("0 ~ 255")])]),_._v(" "),v("li",[v("code",[_._v("char(100)")]),_._v(" "),v("ul",[v("li",[_._v("固定长度 100")])])])])]),_._v(" "),v("li",[_._v("varchar\n"),v("ul",[v("li",[_._v("长度 "),v("code",[_._v("0 ~ 65535")])]),_._v(" "),v("li",[_._v("varchar(100)\n"),v("ul",[v("li",[_._v("最大长度100")]),_._v(" "),v("li",[_._v("在最大范围内使用多少就分配多少")]),_._v(" "),v("li",[_._v("占用空间 = 字符串长度 + 1 字节")]),_._v(" "),v("li",[_._v("varchar（20）你既可以添加20个英文字符，也可以添加二十个中文字符。 表示的字符长度")])])])])])]),_._v(" "),v("h3",{attrs:{id:"文本类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#文本类型"}},[_._v("#")]),_._v(" 文本类型")]),_._v(" "),v("ul",[v("li",[_._v("tinytext\n"),v("ul",[v("li",[_._v("允许长度 "),v("code",[_._v("0 ~ 255")]),_._v(" 字节")]),_._v(" "),v("li",[_._v("存储空间 = 值的长度 + 2 字节")])])]),_._v(" "),v("li",[_._v("text\n"),v("ul",[v("li",[_._v("允许长度 "),v("code",[_._v("0 ~ 65535")]),_._v(" 字节")]),_._v(" "),v("li",[_._v("存储空间 = 值的长度 + 2 字节")])])]),_._v(" "),v("li",[_._v("mediumtext\n"),v("ul",[v("li",[_._v("允许长度 "),v("code",[_._v("0 ~ 16772150")])]),_._v(" "),v("li",[_._v("存储空间 = 值的长度 + 3 字节")])])]),_._v(" "),v("li",[_._v("longtext\n"),v("ul",[v("li",[_._v("允许长度 "),v("code",[_._v("0 ~ 4294967295")])]),_._v(" "),v("li",[_._v("存储空间 = 值的长度 + 4 字节")])])])]),_._v(" "),v("h3",{attrs:{id:"二进制类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二进制类型"}},[_._v("#")]),_._v(" 二进制类型")]),_._v(" "),v("ul",[v("li",[_._v("binary(M)\n"),v("ul",[v("li",[_._v("字节数 M")]),_._v(" "),v("li",[_._v("允许长度 "),v("code",[_._v("0 ~ M")])]),_._v(" "),v("li",[_._v("值长度不足 "),v("code",[_._v("\\0")]),_._v(" 补充")]),_._v(" "),v("li",[_._v("固定长度")])])]),_._v(" "),v("li",[_._v("varbinary(M)\n"),v("ul",[v("li",[_._v("字节数 "),v("code",[_._v("值长度 + 1")])]),_._v(" "),v("li",[_._v("允许长度 "),v("code",[_._v("0 ~ M")])]),_._v(" "),v("li",[_._v("可变长度")])])]),_._v(" "),v("li",[_._v("bit(M)\n"),v("ul",[v("li",[_._v("M 位二进制 最大值 64")])])]),_._v(" "),v("li",[_._v("tinyblob\n"),v("ul",[v("li",[_._v("可变长二进制数据")]),_._v(" "),v("li",[_._v("最长 "),v("code",[_._v("255")]),_._v(" 个字节")])])]),_._v(" "),v("li",[_._v("bolb\n"),v("ul",[v("li",[_._v("可变长二进制数据")]),_._v(" "),v("li",[_._v("最长 "),v("code",[_._v("2^16 -1")]),_._v(" 个字节")])])]),_._v(" "),v("li",[_._v("mediumblob\n"),v("ul",[v("li",[_._v("可变长二进制数据")]),_._v(" "),v("li",[_._v("最长 "),v("code",[_._v("2^24 -1")]),_._v(" 个字节")])])]),_._v(" "),v("li",[_._v("longblob\n"),v("ul",[v("li",[_._v("可变长二进制数据")]),_._v(" "),v("li",[_._v("最长 "),v("code",[_._v("2^32 -1")]),_._v(" 个字节")])])])]),_._v(" "),v("h3",{attrs:{id:"set-类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#set-类型"}},[_._v("#")]),_._v(" SET 类型")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("属性名 set ('值1', '值2', ..., '值n')")])]),_._v(" "),v("li",[_._v("最多 64 个元素")]),_._v(" "),v("li",[_._v("值末尾的空格将会被系统直接删除")]),_._v(" "),v("li",[_._v("可以取列表中的一个元素或者多个元素的组合。取多个元素时，不同元素之间用逗号隔开")])]),_._v(" "),v("h3",{attrs:{id:"enum-类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#enum-类型"}},[_._v("#")]),_._v(" ENUM 类型")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("属性名 ENUM('值1', '值2', ..., '值n')")])]),_._v(" "),v("li",[_._v("最多 65535 个值")]),_._v(" "),v("li",[_._v("列表中的每个值独有一个顺序排列的编号，MySQL中存入的是这个编号，而不是列表中的值。")]),_._v(" "),v("li",[_._v("ENUM类型加上了NOT NULL属性，其默认值为取值列表的第一个元素。如果不加NOT NULL属性，ENUM类型将允许插入NULL，而且NULL为默认值")])]),_._v(" "),v("h3",{attrs:{id:"json类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#json类型"}},[_._v("#")]),_._v(" JSON类型")]),_._v(" "),v("ul",[v("li",[_._v("值是以字符串形式写入")]),_._v(" "),v("li",[_._v("写入时MySQL会对字符串进行解析，如果不符合JSON格式，那么写入将失败")]),_._v(" "),v("li",[_._v("JSON函数\n"),v("ul",[v("li",[v("code",[_._v("json_array()")]),_._v(" "),v("ul",[v("li",[_._v("创建JSON数组")])])]),_._v(" "),v("li",[v("code",[_._v("json_array_append()")]),_._v(" "),v("ul",[v("li",[_._v("追加数据")])])]),_._v(" "),v("li",[v("code",[_._v("json_array_insert()")]),_._v(" "),v("ul",[v("li",[_._v("插入数据")])])]),_._v(" "),v("li",[v("code",[_._v("_>")]),_._v(" "),v("ul",[v("li",[_._v("列路径运算符")])])]),_._v(" "),v("li",[v("code",[_._v("__>")]),_._v(" "),v("ul",[v("li",[_._v("增强的列路径运算符")])])]),_._v(" "),v("li",[v("code",[_._v("json_contains()")]),_._v(" "),v("ul",[v("li",[_._v("判断路径中是否包含某个对象")])])]),_._v(" "),v("li",[v("code",[_._v("json_contains_path()")]),_._v(" "),v("ul",[v("li",[_._v("判断路径中是否包含数据")])])]),_._v(" "),v("li",[v("code",[_._v("json_depth()")]),_._v(" "),v("ul",[v("li",[_._v("json文档最大深度")])])]),_._v(" "),v("li",[v("code",[_._v("json_extract()")]),_._v(" "),v("ul",[v("li",[_._v("返回json文档数据")])])]),_._v(" "),v("li",[v("code",[_._v("json_insert()")])]),_._v(" "),v("li",[v("code",[_._v("json_keys()")])]),_._v(" "),v("li",[v("code",[_._v("json_length()")])]),_._v(" "),v("li",[v("code",[_._v("json_merge()")])]),_._v(" "),v("li",[v("code",[_._v("json_merge_preserve()")])]),_._v(" "),v("li",[v("code",[_._v("json_object()")])]),_._v(" "),v("li",[v("code",[_._v("json_pretty()")])]),_._v(" "),v("li",[v("code",[_._v("json_quote()")])]),_._v(" "),v("li",[v("code",[_._v("json_remove()")])]),_._v(" "),v("li",[v("code",[_._v("json_replace()")])]),_._v(" "),v("li",[v("code",[_._v("json_search()")])]),_._v(" "),v("li",[v("code",[_._v("json_set()")])]),_._v(" "),v("li",[v("code",[_._v("json_storage_free()")])]),_._v(" "),v("li",[v("code",[_._v("json_storage_size()")])]),_._v(" "),v("li",[v("code",[_._v("json_table()")])]),_._v(" "),v("li",[v("code",[_._v("json_type()")])]),_._v(" "),v("li",[v("code",[_._v("json_unquote()")])]),_._v(" "),v("li",[v("code",[_._v("json_valid()")])])])])]),_._v(" "),v("h3",{attrs:{id:"spatial数据类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spatial数据类型"}},[_._v("#")]),_._v(" spatial数据类型")]),_._v(" "),v("ul",[v("li",[_._v("空间数据")])]),_._v(" "),v("h2",{attrs:{id:"数据表操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据表操作"}},[_._v("#")]),_._v(" 数据表操作")]),_._v(" "),v("h3",{attrs:{id:"设计理念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#设计理念"}},[_._v("#")]),_._v(" 设计理念")]),_._v(" "),v("ul",[v("li",[_._v("标准化规范化\n"),v("ul",[v("li",[_._v("确保每列保持原子性")]),_._v(" "),v("li",[_._v("确保每列都和主键相关")]),_._v(" "),v("li",[_._v("确保每列都和主键列直接相关，而不是间接相关")])])]),_._v(" "),v("li",[_._v("数据驱动")]),_._v(" "),v("li",[_._v("考虑各种变化")]),_._v(" "),v("li",[_._v("表和表的关系\n"),v("ul",[v("li",[_._v("一对一")]),_._v(" "),v("li",[_._v("一对多")]),_._v(" "),v("li",[_._v("多对多")])])])]),_._v(" "),v("h3",{attrs:{id:"字符集"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字符集"}},[_._v("#")]),_._v(" 字符集")]),_._v(" "),v("blockquote",[v("p",[_._v("符号与编码的集合")])]),_._v(" "),v("h4",{attrs:{id:"支持引擎"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#支持引擎"}},[_._v("#")]),_._v(" 支持引擎")]),_._v(" "),v("ul",[v("li",[_._v("MyISAM")]),_._v(" "),v("li",[_._v("MEMORY")]),_._v(" "),v("li",[_._v("InnoDB")])]),_._v(" "),v("h4",{attrs:{id:"字符集编码表"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字符集编码表"}},[_._v("#")]),_._v(" 字符集编码表")]),_._v(" "),v("blockquote",[v("p",[_._v("字符集中的字符集合")])]),_._v(" "),v("ul",[v("li",[_._v("字符串表达式的编码表属性\n"),v("ul",[v("li",[_._v("ASCII\n"),v("ul",[v("li",[_._v("表达式只能包含Unicode码从"),v("code",[_._v("U+0000")]),_._v("到"),v("code",[_._v("U+007F")])]),_._v(" "),v("li",[_._v("UNICODE的子集")]),_._v(" "),v("li",[_._v("ASCII字符编码可以被无损地转化为任何UNICODE编码或者其他ASCII的父集")])])]),_._v(" "),v("li",[_._v("UNICODE\n"),v("ul",[v("li",[_._v("表达式包含Unicode码从"),v("code",[_._v("U+0000")]),_._v("到"),v("code",[_._v("U+10FFFF")])])])])])]),_._v(" "),v("li",[_._v("特点\n"),v("ul",[v("li",[_._v("字符串的编码表取决于字符串内容，有可能与字符集的编码表不同")]),_._v(" "),v("li",[_._v("含有一个字符串参数的函数继承参数的编码表")]),_._v(" "),v("li",[_._v("返回字符串但没有字符串参数，并且使用 "),v("code",[_._v("character_set_connection")]),_._v(" 变量设置的函数，其编码表为 "),v("code",[_._v("character_set_connection")]),_._v(" 设置的编码表")]),_._v(" "),v("li",[_._v("含有两个及以上字符串参数的函数使用“最宽的”参数编码表作为编码表。如果在两个参数中，一个为ASCII字符集，另一个为UNICODE字符集，那么函数的编码表为UNICODE")])])]),_._v(" "),v("li",[_._v("在语句中可使用 "),v("code",[_._v("CHARACTER SET")]),_._v(" 指定字符集")])]),_._v(" "),v("h4",{attrs:{id:"元数据"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#元数据"}},[_._v("#")]),_._v(" 元数据")]),_._v(" "),v("ul",[v("li",[_._v("关于数据的数据")]),_._v(" "),v("li",[_._v("与数据库内容相对的其他任何描述数据库的内容都是元数据")]),_._v(" "),v("li",[_._v("列名、数据库名、版本名、用户名以及大部分show语句展示的结果都是元数据")]),_._v(" "),v("li",[_._v("特点\n"),v("ul",[v("li",[_._v("所有的元数据必须为同一个字符集，否则在 "),v("code",[_._v("INFORMATION_SCHEMA")]),_._v(" 中SHOW语句或 "),v("code",[_._v("SELECY")]),_._v(" 语句无法正常运行")]),_._v(" "),v("li",[_._v("元数据必须包含所有语言所用到的所有字符，否则使用者无法使用自己的语言命名列和表")]),_._v(" "),v("li",[_._v("MySQL使用UNICODE字符集存储数据，命名为 "),v("code",[_._v("UTF-8")])])])])]),_._v(" "),v("h4",{attrs:{id:"查看字符集"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#查看字符集"}},[_._v("#")]),_._v(" 查看字符集")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("SHOW VARIABLES LIKE 'character_set_system';")])]),_._v(" "),v("li",[v("code",[_._v("SHOW CHARACTER SET;")])]),_._v(" "),v("li",[_._v("如果想要服务器以不同的字符集传递元数据结果，使用 "),v("code",[_._v("SET NAMES")]),_._v(" 语句强制服务器完成字符集转换")])]),_._v(" "),v("h4",{attrs:{id:"错误消息字符集"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#错误消息字符集"}},[_._v("#")]),_._v(" 错误消息字符集")]),_._v(" "),v("h3",{attrs:{id:"排序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#排序"}},[_._v("#")]),_._v(" 排序")]),_._v(" "),v("h4",{attrs:{id:"规则的集合"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#规则的集合"}},[_._v("#")]),_._v(" 规则的集合")]),_._v(" "),v("ul",[v("li",[_._v("对于字符集和排序有4个层面的默认设置：服务器、数据库、表和列")])]),_._v(" "),v("h4",{attrs:{id:"show-collation"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#show-collation"}},[_._v("#")]),_._v(" "),v("code",[_._v("SHOW COLLATION;")])]),_._v(" "),v("ul",[v("li",[_._v("查看排序")]),_._v(" "),v("li",[_._v('后缀"_cs"或者"_ci"意思是区分大小写和不区分大小写（Case Sensitive & Case Insensitve）')])]),_._v(" "),v("h4",{attrs:{id:"排序命名约定"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#排序命名约定"}},[_._v("#")]),_._v(" 排序命名约定")]),_._v(" "),v("ul",[v("li",[_._v("排序名称以字符集开头，以一个或多个后缀标明其他特性")]),_._v(" "),v("li",[_._v("指定语言的排序包括本地编码或语言名称")]),_._v(" "),v("li",[_._v("排序后缀指明这个排序是否区分大小写或重音")]),_._v(" "),v("li",[_._v("对Unicode字符集，排序名称可能包含版本号数字来指明对应的Unicode排序算法（UCA）的版本号。如果不包含版本号，就默认使用版本4.0.0。")])]),_._v(" "),v("h4",{attrs:{id:"服务器字符集和排序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#服务器字符集和排序"}},[_._v("#")]),_._v(" 服务器字符集和排序")]),_._v(" "),v("ul",[v("li",[_._v("MySQL服务器的字符集和排序可在服务器启动时通过命令或在配置文件中设置，在运行时可以修改。")]),_._v(" "),v("li",[_._v("服务器字符集和排序取决于你启动mysqld时使用的配置项，可以使用++character+set+server设置，在这个命令之后可以加上++collation+server设置排序。如果不指定字符集，默认为utf8mb4。")]),_._v(" "),v("li",[_._v("如果只指定字符集，不指定排序，就使用字符集对应的默认排序")])]),_._v(" "),v("h4",{attrs:{id:"数据库字符集和排序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据库字符集和排序"}},[_._v("#")]),_._v(" 数据库字符集和排序")]),_._v(" "),v("ul",[v("li",[_._v("数据库包含自己的字符集和排序")]),_._v(" "),v("li",[_._v("CREATE DATABASE和ALTERDATABASE语句都可使用选项指定数据库的字符集和排序")]),_._v(" "),v("li",[_._v("MySQL数据库字符集和排序规则\n"),v("ul",[v("li",[_._v("创建时，同时指定字符集和排序，使用指定的字符集和排序")]),_._v(" "),v("li",[_._v("只指定字符集，不指定排序，使用字符集对应的默认排序")]),_._v(" "),v("li",[_._v("只指定排序，使用排序对应的字符集")]),_._v(" "),v("li",[_._v("字符集与排序都不指定，选择服务器的字符集和排序")])])])]),_._v(" "),v("h4",{attrs:{id:"表字符集和排序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#表字符集和排序"}},[_._v("#")]),_._v(" 表字符集和排序")]),_._v(" "),v("ul",[v("li",[_._v("每张表都有字符集和排序")]),_._v(" "),v("li",[_._v("规则\n"),v("ul",[v("li",[_._v("如果同时指定字符集和排序，就使用指定的字符集和排序")]),_._v(" "),v("li",[_._v("如果只指定字符集，不指定排序，就使用字符集对应的默认排序")]),_._v(" "),v("li",[_._v("如果只指定排序，就使用排序对应的字符集")]),_._v(" "),v("li",[_._v("如果两者都不指定，就使用数据库的字符集和排序")])])])]),_._v(" "),v("h4",{attrs:{id:"列字符集和排序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#列字符集和排序"}},[_._v("#")]),_._v(" 列字符集和排序")]),_._v(" "),v("h4",{attrs:{id:"字符串的字符集和排序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字符串的字符集和排序"}},[_._v("#")]),_._v(" 字符串的字符集和排序")]),_._v(" "),v("h4",{attrs:{id:"连接字符集和排序规则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#连接字符集和排序规则"}},[_._v("#")]),_._v(" 连接字符集和排序规则")]),_._v(" "),v("h4",{attrs:{id:"配置应用程序字符集和排序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#配置应用程序字符集和排序"}},[_._v("#")]),_._v(" 配置应用程序字符集和排序")]),_._v(" "),v("h3",{attrs:{id:"命令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#命令"}},[_._v("#")]),_._v(" 命令")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("create table tablename()")])]),_._v(" "),v("li",[v("code",[_._v("describe/desc tablename")])]),_._v(" "),v("li",[v("code",[_._v("drop table tablename")])]),_._v(" "),v("li",[v("code",[_._v("alert table user rename user_info;")])]),_._v(" "),v("li",[v("code",[_._v("alert table tablename add propName propType first/after pNameOld;")])]),_._v(" "),v("li",[v("code",[_._v("alert table tablename drop propName;")])])]),_._v(" "),v("h3",{attrs:{id:"约束"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#约束"}},[_._v("#")]),_._v(" 约束")]),_._v(" "),v("ul",[v("li",[_._v("not  null")]),_._v(" "),v("li",[_._v("default")]),_._v(" "),v("li",[_._v("unique\n"),v("ul",[v("li",[_._v("在设计表中的索引中配置")])])]),_._v(" "),v("li",[_._v("primary")]),_._v(" "),v("li",[_._v("auto_increment")]),_._v(" "),v("li",[_._v("foreign key")])]),_._v(" "),v("h2",{attrs:{id:"数据操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据操作"}},[_._v("#")]),_._v(" 数据操作")]),_._v(" "),v("h3",{attrs:{id:"插入数据记录"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#插入数据记录"}},[_._v("#")]),_._v(" 插入数据记录")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("insert into tablename(field1, field2, ...., fieldn) values(value1, value2, ..., valuen);")])]),_._v(" "),v("li",[v("code",[_._v("insert into tablename(field1, field2, field3, ..., fieldn ) values(value1, value2, value3, ..., valuen), (value11, value22, value33, ..., valuenn), ..., (value1n, value2n, value3n, ..., valuemn);")])]),_._v(" "),v("li",[v("code",[_._v("insert into tablename(jsonfield) values(jsonObjectValue);")])])]),_._v(" "),v("h3",{attrs:{id:"更新数据记录"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#更新数据记录"}},[_._v("#")]),_._v(" 更新数据记录")]),_._v(" "),v("ul",[v("li",[_._v("更新特定数据记录\n"),v("ul",[v("li",[v("code",[_._v("update tablename set field1=value1, field2=value2, field3=value3 where condition;")])])])]),_._v(" "),v("li",[_._v("更新所有数据记录\n"),v("ul",[v("li",[v("code",[_._v("update tablename set field1=value1, field2=value2, field3=value3 [where condition]")])])])]),_._v(" "),v("li",[_._v("更新JSON结构数据记录\n"),v("ul",[v("li",[v("code",[_._v("update tablename set colname=JSON_REPLACE(colname, path, val) where condition;")])])])])]),_._v(" "),v("h3",{attrs:{id:"删除数据记录"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#删除数据记录"}},[_._v("#")]),_._v(" 删除数据记录")]),_._v(" "),v("ul",[v("li",[_._v("删除特定数据记录\n"),v("ul",[v("li",[v("code",[_._v("delete from tablename where condition;")])])])]),_._v(" "),v("li",[_._v("删除所有数据记录\n"),v("ul",[v("li",[v("code",[_._v("delete from tablename [where condition];")])])])])]),_._v(" "),v("h2",{attrs:{id:"数据查询"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据查询"}},[_._v("#")]),_._v(" 数据查询")]),_._v(" "),v("h3",{attrs:{id:"简单查询"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#简单查询"}},[_._v("#")]),_._v(" 简单查询")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("select field1 field2 .... fieldn from tablename [where condition1] [group by fieldm [having condition2]] [order by fieldn [asc|desc]];")])]),_._v(" "),v("li",[v("code",[_._v("select field1, field2, ..., fieldn from tablename;")])]),_._v(" "),v("li",[v("code",[_._v("select * from tablename;")])]),_._v(" "),v("li",[v("code",[_._v("select distinct field1, field2, field3, ... , fieldn from tablename;")]),_._v(" "),v("ul",[v("li",[_._v("distinct 去重")])])]),_._v(" "),v("li",[v("code",[_._v("select field1, field2, ..., fieldn from tablename where fieldm [not] in (value1, value2, value3, ..., valuen);")]),_._v(" "),v("ul",[v("li",[_._v("in")]),_._v(" "),v("li",[_._v("not in")])])]),_._v(" "),v("li",[v("code",[_._v("select field1, field2, ..., fieldn from tablename where fieldm [not] between minvalue and maxvalue;")]),_._v(" "),v("ul",[v("li",[_._v("between and")]),_._v(" "),v("li",[_._v("not between and")])])]),_._v(" "),v("li",[v("code",[_._v("select field1, field2, ..., fieldn from tablename where [not] fieldm [not] like value;")]),_._v(" "),v("ul",[v("li",[_._v("like")]),_._v(" "),v("li",[_._v("not like")]),_._v(" "),v("li",[_._v("_\n"),v("ul",[v("li",[_._v("匹配单个字符")])])]),_._v(" "),v("li",[_._v("%\n"),v("ul",[v("li",[_._v("匹配任意长度的字符串，即可以是0个字符、1个字符，也可以是很多字符")]),_._v(" "),v("li",[_._v("%% 任意字符")])])])])]),_._v(" "),v("li",[v("code",[_._v("select field1, field2, field3, ..., fieldn from tablenam order by fieldm [asc|desc] [, fieldmm [asc|desc]];")]),_._v(" "),v("ul",[v("li",[_._v("order by")]),_._v(" "),v("li",[_._v("asc | desc")])])]),_._v(" "),v("li",[v("code",[_._v("select function() from tablename where condition group by field;")]),_._v(" "),v("ul",[v("li",[_._v("group by\n"),v("ul",[v("li",[_._v("关键字GROUP BY单独使用时，默认查询出每个分组中随机的一条记录，具有很大的不确定性，一般建议将分组关键字与统计函数一起使用")])])]),_._v(" "),v("li",[_._v("1005\n"),v("ul",[v("li",[_._v("数据库设置问题，group by 后的字段与 select 后的字段要一致")])])])])]),_._v(" "),v("li",[v("code",[_._v("select group_concat(field) from tablename where condition group by field;")]),_._v(" "),v("ul",[v("li",[_._v("显示每个分组中的字段")]),_._v(" "),v("li",[v("code",[_._v("SELECT sex, GROUP_CONCAT(name) name, COUNT(name) number FROM student_list GROUP BY sex;")])]),_._v(" "),v("li",[_._v("执行统计函数COUNT()")]),_._v(" "),v("li",[_._v("GROUP_CONCAT()，显示每个分组")])])])]),_._v(" "),v("h3",{attrs:{id:"联合查询"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#联合查询"}},[_._v("#")]),_._v(" 联合查询")]),_._v(" "),v("h4",{attrs:{id:"内连接查询"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#内连接查询"}},[_._v("#")]),_._v(" 内连接查询")]),_._v(" "),v("ul",[v("li",[v("p",[v("code",[_._v("select field1, field2, ..., fieldn from tablename1 inner join tablename2 [inner join tablenamen] on condition")])]),_._v(" "),v("ul",[v("li",[_._v("inner join on\n"),v("ul",[v("li",[_._v("on 后要有关联条件 否则所有数据都会展示，显示重复内容")]),_._v(" "),v("li",[_._v("推荐使用此写法")])])])])]),_._v(" "),v("li",[v("p",[v("code",[_._v("select field1, field2, ..., fieldn [as] otherfieldn from tablename1 [as] othertablename1, ..., tablenamen [as] othertablenamen;")])]),_._v(" "),v("ul",[v("li",[v("code",[_._v("select ts1.id, ts2.name from tablename1 as ts1, tablename2 as ts2 where ts1.id=ts2.id and ts2.name='nana';")]),_._v(" "),v("ul",[v("li",[_._v("自连接")])])]),_._v(" "),v("li",[v("code",[_._v("select ts1.id, ts2.name from tablename1 ts1, tablename2 ts2 where ts1.no=ts2.no;")]),_._v(" "),v("ul",[v("li",[_._v("等值连接 "),v("code",[_._v("=")])]),_._v(" "),v("li",[v("code",[_._v("select ts1.id, ts2.name from tablename1 ts1 inner join tablename2 ts2 on ts1.no=ts2.no;")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("ts1.no = ts2.no")]),_._v(" 关联条件 不能省略")])])])])])])]),_._v(" "),v("li",[v("p",[v("code",[_._v("select t1.id, t2.name, t1.no+t2.no totalNo from tablename1 t1 inner join tablename2 t2 on t1.no!= t2.no and t1.age > t2.age and t1.ss<t2.ss inner join tablename3 t3 on t1.no=t3.no inner join tablename4 on t4.no=t1.no;")])]),_._v(" "),v("ul",[v("li",[_._v("不等连接\n"),v("ul",[v("li",[v("code",[_._v("> < >= <= !=")])]),_._v(" "),v("li",[v("code",[_._v("<>")]),_._v(" 与 "),v("code",[_._v("!=")]),_._v(" 等价")])])])])])]),_._v(" "),v("h4",{attrs:{id:"外连接查询"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#外连接查询"}},[_._v("#")]),_._v(" 外连接查询")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("select field1, field2, ..., fieldn from tablename1 left|right|full [outer] join tablename2 on condition;")]),_._v(" "),v("ul",[v("li",[_._v("left | right | full")]),_._v(" "),v("li",[_._v("outer join ... on")])])]),_._v(" "),v("li",[v("code",[_._v("select t1.name, t2.name from tablename1 t1 left outer join tablename2 t2 on t1.no=t2.no;")]),_._v(" "),v("ul",[v("li",[_._v("左外连接\n"),v("ul",[v("li",[_._v("新关系中执行匹配条件时，以关键字LEFT JOIN左边的表为参考表")]),_._v(" "),v("li",[_._v("左连接的结果包括LEFT OUTER字句中指定的左表的所有行，而不仅仅是连接列所匹配的行，如果左表的某行在右表中没有匹配行，则在相关联的结果行中，右表的所有选择列表均为空值")])])])])]),_._v(" "),v("li",[v("code",[_._v("select t1.name, t2.name from tablename1 t1 right outer join tablename2 t2 on t1.no=t2.no;")]),_._v(" "),v("ul",[v("li",[_._v("右外连接\n"),v("ul",[v("li",[_._v("关键字RIGHTJOIN右边的表为参考表，如果右表的某行在左表中没有匹配行，左表将返回空值")])])])])]),_._v(" "),v("li",[_._v("全外连接\n"),v("ul",[v("li",[_._v("左外连接与右外连接去重后的合集")])])])]),_._v(" "),v("h4",{attrs:{id:"合并查询数据"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#合并查询数据"}},[_._v("#")]),_._v(" 合并查询数据")]),_._v(" "),v("div",{staticClass:"language-mysql line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("select field1, field2, ..., fieldn\nfrom tablename1\nunion | union all\nselect field1, field2,..., fieldn\nfrom tablename2\nunion | union all\nselect field1, field2, ..., fieldn\nfrom tablename3\n...\n")])]),_._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[_._v("1")]),v("br"),v("span",{staticClass:"line-number"},[_._v("2")]),v("br"),v("span",{staticClass:"line-number"},[_._v("3")]),v("br"),v("span",{staticClass:"line-number"},[_._v("4")]),v("br"),v("span",{staticClass:"line-number"},[_._v("5")]),v("br"),v("span",{staticClass:"line-number"},[_._v("6")]),v("br"),v("span",{staticClass:"line-number"},[_._v("7")]),v("br"),v("span",{staticClass:"line-number"},[_._v("8")]),v("br"),v("span",{staticClass:"line-number"},[_._v("9")]),v("br")])]),v("ul",[v("li",[_._v("union 会去重")]),_._v(" "),v("li",[_._v("union all 相同数据不会去除")]),_._v(" "),v("li",[_._v("将多个SELECT语句的查询结果合并在一起，组成新的关系")])]),_._v(" "),v("h4",{attrs:{id:"子查询"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#子查询"}},[_._v("#")]),_._v(" 子查询")])])}),[],!1,null,null,null);v.default=a.exports}}]);
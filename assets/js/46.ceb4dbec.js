(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{343:function(v,_,t){"use strict";t.r(_);var a=t(10),r=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"js-垃圾回收"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#js-垃圾回收"}},[v._v("#")]),v._v(" JS 垃圾回收")]),v._v(" "),_("blockquote",[_("p",[v._v("执行环境负责在代码执行时管理内容"),_("br"),v._v("\n通过自动内存管理实现内存分配和闲置资源回收")])]),v._v(" "),_("h2",{attrs:{id:"思路"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#思路"}},[v._v("#")]),v._v(" 思路")]),v._v(" "),_("ul",[_("li",[v._v("确定哪个环境变量不再使用，然后释放它占用的空间")]),v._v(" "),_("li",[v._v("周期性: 即垃圾回收程序每隔一定时间（或者说在代码执\n行过程中某个预定的收集时间）就会自动运行")]),v._v(" "),_("li",[v._v("近似且不完美的方案: 某块内存是否还有用，属于“不可判定的”问题，意味着靠算法是解决不了的")]),v._v(" "),_("li",[v._v("垃圾回收程序必须跟踪记录哪个变量还会使用，以及哪个变量不会再使用，以便回收\n内存")])]),v._v(" "),_("h2",{attrs:{id:"标记清理-mark-and-sweep"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#标记清理-mark-and-sweep"}},[v._v("#")]),v._v(" 标记清理(mark-and-sweep)")]),v._v(" "),_("blockquote",[_("p",[v._v("到了 2008 年，IE、Firefox、Opera、Chrome 和 Safari 都在自己的 JavaScript 实现中采用标记清理（或其变体），只是在运行垃圾回收的频率上有所差异")])]),v._v(" "),_("ul",[_("li",[v._v("当变量进入上下文，比如在函数内部声明一个变量时，这个变量会被加上存在于上下文中的标记")]),v._v(" "),_("li",[v._v("在上下文中的变量，逻辑上讲，永远不应该释放它们的内存，因为只要上下文中的代码在运行，就有可能用到它们。")]),v._v(" "),_("li",[v._v("当变量离开上下文时，也会被加上离开上下文的标记")]),v._v(" "),_("li",[v._v("变量加标记的方式\n"),_("ul",[_("li",[v._v("当变量进入上下文时，反转某一位")]),v._v(" "),_("li",[v._v("维护 “在上下文中” 和 “不在上下文中” 两个变量列表,可以把变量从一个列表转移到另一个列表")])])]),v._v(" "),_("li",[v._v("垃圾回收程序运行的时候，会"),_("strong",[v._v("标记")]),v._v("内存中存储的"),_("strong",[v._v("所有变量")]),v._v(", 它会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记"),_("strong",[v._v("去掉")])]),v._v(" "),_("li",[v._v("在此之后再被加上标记的变量就是待删除的了，原因是任何在上下文中的变量都访问不到它们了。随后垃圾回收程序做一次"),_("strong",[v._v("内存清理")]),v._v("，销毁"),_("strong",[v._v("带标记")]),v._v("的所有值并收回它们的内存")])]),v._v(" "),_("h2",{attrs:{id:"引用计数-reference-counting"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#引用计数-reference-counting"}},[v._v("#")]),v._v(" 引用计数(（reference counting)")]),v._v(" "),_("blockquote",[_("p",[v._v("不常用")])]),v._v(" "),_("ul",[_("li",[v._v("是对每个值都记录它被引用的次数。声明变量并给它赋一个引用值时，这个值的引用数为 1。如果同一个值又被赋给另一个变量，那么引用数加 1。类似地，如果保存对该值引用的变量被其他值给覆盖了，那么引用数减 1。当一个值的引用数为 0 时，就说明没办法再访问到这个值了，因此可以安全地收回其内存了。垃圾回收程序下次运行的时候就会释放引用数为 0 的值的内存。")]),v._v(" "),_("li",[v._v("问题：循环引用。所谓循环引用，就是对象 A 有一个指针指向对象 B，而对象 B 也引用了对象 A")]),v._v(" "),_("li",[v._v("把变量设置为 null 实际上会切断变量与其之前引用值之间的关系。当下次垃圾回收程序运行时，这些值就会被删除，内存也会被回收")])]),v._v(" "),_("h2",{attrs:{id:"性能"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#性能"}},[v._v("#")]),v._v(" 性能")]),v._v(" "),_("ul",[_("li",[v._v("在写代码时就要做到: 无论什么时候开始收集垃圾，都能让它尽快结束工作")])]),v._v(" "),_("h2",{attrs:{id:"内存管理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内存管理"}},[v._v("#")]),v._v(" 内存管理")]),v._v(" "),_("ul",[_("li",[v._v("优化内存占用的最佳手段就是保证在执行代码时只保存必要的数据。如果数据不再必要，那么把它设置为 null，从而释放其引用。这也可以叫\n作解除引用。最适合全局变量和全局对象的属性")]),v._v(" "),_("li",[v._v("解除对一个值的引用并不会自动导致相关内存被回收。解除引用的关键在于确保相关的值已经不在上下文里了，因此它在下次垃圾回收时会被回收")]),v._v(" "),_("li",[v._v("通过 const 和 let 声明提升性能\n"),_("ul",[_("li",[v._v("ES6 增加这两个关键字不仅有助于改善代码风格，而且同样有助于改进垃圾回收的过程")])])]),v._v(" "),_("li",[v._v("隐藏类和删除操作\n"),_("ul",[_("li",[v._v("V8 在将解释后的 JavaScript 代码编译为实际的机器码时会利用“隐藏类”")]),v._v(" "),_("li",[v._v("运行期间，V8 会将创建的对象与隐藏类关联起来，以跟踪它们的属性特征。能够共享相同隐藏类的对象性能会更好，V8 会针对这种情况进行优化，但不一定总能够做到")]),v._v(" "),_("li",[v._v("避免 JavaScript 的“先创建再补充”（ready-fire-aim）式的动态属性赋值，并在构造函数中一次性声明所有属性")]),v._v(" "),_("li",[v._v("动态删除属性与动态添加属性导致的后果一样。最佳实践是把不想要的属性设置为 null。这样可以保持隐藏类不变和继续共享，同时也能达到删除引用值供垃圾回收程序回收的效果。")])])])]),v._v(" "),_("h2",{attrs:{id:"内存泄漏"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏"}},[v._v("#")]),v._v(" 内存泄漏")]),v._v(" "),_("ul",[_("li",[v._v("JavaScript 中的内存泄漏大部分是由不合理的引用导致的")]),v._v(" "),_("li",[v._v("意外声明全局变量是最常见但也最容易修复的内存泄漏问题\n"),_("ul",[_("li",[v._v("只要在变量声明前头加上 var、let 或 const 关键字即可，这样变量就会在函数执行完毕后离开作用域")])])]),v._v(" "),_("li",[v._v("定时器也可能会悄悄地导致内存泄漏, 定时器的回调通过闭包引用了外部变量")]),v._v(" "),_("li",[v._v("使用 JavaScript 闭包很容易在不知不觉间造成内存泄漏")])]),v._v(" "),_("h2",{attrs:{id:"静态分配与对象池"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#静态分配与对象池"}},[v._v("#")]),v._v(" 静态分配与对象池")])])}),[],!1,null,null,null);_.default=r.exports}}]);